;Naveen Janarthanan
;CSC 3310

;This function needs to create a "list" that will have two elements: x-cor and y-cor.
(define (make-point x-cor y-cor)
    (cons x-cor y-cor)
)

;retrieves value of x point
(define (get-x point)
	(car point)
)

;retreives value of y point
(define (get-y point)
	(cdr point)
)

;Using the created points (using make-point) this function returns true (#t) if the three points
;form a line of false (#f) if the form a triangle.
(define (is-line point1 point2 point3)
    (let* (
        (x1 (get-x point1))
        (x2 (get-x point2))
        (y1 (get-y point1))
        (y2 (get-y point2))
        (x3 (get-x point3))
        (y3 (get-y point3))
        (x (- x2 x1))
        (y (- y2 y1))
        (3x (- x3 x1))
        (3y (- y3 y1))
        (w (/ y x))
        (r (/ 3y 3x)))
    (= w r))
)

;Calculates the distance between two points 
(define (distance point1 point2)
    (let* (
        (x1 (get-x point1))
        (x2 (get-x point2))
        (y1 (get-y point1))
        (y2 (get-y point2))
        (x (- x2 x1))
        (y (- y2 y1))
        (z (* x x))
        (t (* y y)))
    (sqrt (+ z t)))
)

;Calculates the perimeter of a triangle defined by three points 
(define (perimeter point1 point2 point3)
    (let* (
        (x1 (get-x point1))
        (x2 (get-x point2))
        (y1 (get-y point1))
        (y2 (get-y point2))
        (x3 (get-x point3))
        (y3 (get-y point3))
        (x (- x2 x1))
        (y (- y2 y1))
        (z (* x x))
        (t (* y y))
        (sideA (sqrt (+ z t)))
        (3x (- x3 x1))
        (3y (- y3 y1))
        (r (* 3x 3x))
        (u (* 3y 3y))
        (sideB (sqrt (+ r u)))
        (4x (- x3 x2))
        (4y (- y3 y2))
        (p (* 4x 4x))
        (o (* 4y 4y))
        (sideC (sqrt (+ p o))))
    (+ sideA sideB sideC))
)

;Calculates the area of a triangle defined by the three points
(define (area point1 point2 point3)
    (let* (
        (x1 (get-x point1))
        (x2 (get-x point2))
        (y1 (get-y point1))
        (y2 (get-y point2))
        (x3 (get-x point3))
        (y3 (get-y point3))
        (x (- x2 x1))
        (y (- y2 y1))
        (z (* x x))
        (t (* y y))
        (3x (- x3 x1))
        (3y (- y3 y1))
        (r (* 3x 3x))
        (u (* 3y 3y))
        (4x (- x3 x2))
        (4y (- y3 y2))
        (p (* 4x 4x))
        (o (* 4y 4y))
        (c (* x 3y))
        (h (* 3x y))
        (b (- c h)))
    (max(abs(* .5 b))))
)

;Calculates the perimeter, area, and interior angles of the triangle formed by the three points.
(define (calculate-triangle point1 point2 point3)
    (let* (
        (x1 (get-x point1))
        (x2 (get-x point2))
        (y1 (get-y point1))
        (y2 (get-y point2))
        (x3 (get-x point3))
        (y3 (get-y point3))
        (x (- x2 x1))
        (y (- y2 y1))
        (z (* x x))
        (t (* y y))
        (sideA (sqrt (+ z t)))
        (3x (- x3 x1))
        (3y (- y3 y1))
        (r (* 3x 3x))
        (u (* 3y 3y))
        (sideB (sqrt (+ r u)))
        (4x (- x3 x2))
        (4y (- y3 y2))
        (p (* 4x 4x))
        (o (* 4y 4y))
        (sideC (sqrt (+ p o)))
        (perimeter (+ sideA sideB sideC))
        (c (* x 3y))
        (h (* 3x y))
        (b (- c h))
        (area(abs(* .5 b)))
        (asq (* sideA sideA))
        (bsq (* sideB sideB))
        (csq (* sideC sideC))
        (ab (* 2 sideA sideB))
        (bc (* 2 sideB sideC))
        (ca (* 2 sideC sideA))
        (aub (+ asq bsq))
        (abuc (- aub csq))
        (cosinec (/ abuc ab))
        (buc (+ bsq csq))
        (bcua (- buc asq))
        (cosinea (/ bcua bc))
        (cua (+ csq asq))
        (caub (- cua bsq))
        (cosineb (/ caub ca))
        (coc (acos cosinec))
        (coa (acos cosinea))
        (cob (acos cosineb))
        (degree (/ 180.0 3.1415926))
        (cosc (* coc degree))
        (cosa (* coa degree))
        (cosb (* cob degree)))
    (display "Side 1 = ") 
    (display sideA)
    (newline)
    (display "Side 2 = ")
    (display sideB)
    (newline)
    (display "Side 3 = ")
    (display sideC)
    (newline)
    (display "Perimeter = ")
    (display perimeter)
    (newline)
    (display "Area = ")
    (area point1 point2 point3)
    (newline)
    (display "Angle 1 = ")
    (display coa)
    (display " ")
    (display  cosa)
    (newline)
    (display "Angle 2 = ")
    (display cob)
    (display " ")
    (display  cosb)
    (newline)
    (display "Angle 3 = ")
    (display coc)
    (display " ")
    (display cosc)
    (newline)
    (newline))
)

;Checks if isbn is valid
(define (check-isbn numbercode)
    (let* (
        (a(string->list numbercode))
        (l (string-length numbercode))
        (s (substring numbercode 0 3))
        (first (substring numbercode 0 1))
        (n (string->number s))
        (zero (string->number first)))

    (or(and (equal? 978 n) (equal? 13 l) #t)
    (and (equal? 0 zero) (equal? 10 l) #t)))
)
